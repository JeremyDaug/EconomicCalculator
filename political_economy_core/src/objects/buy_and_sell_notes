# Buying and Selling
Buying and selling has Two major sections, the Search, and the Deal.

## The Search

Before anything a seller must offer up a Sell Order to the market, if they don't then they cannot normally be reached for a deal. Sell Orders include what product they are offering, their price in AMV, and quantity.

The Buyer must act next by sending out a FindProduct message to the market. The FindProduct message is an incomplete buy order, and includes the product being sought.

The Market, once it recieves a FindProduct Message, begins to look. It should have a list of Actors who sell that product, weighted by the product's price, quantity, and Variety of products. 

If there are no sellers, it returns ProductNotFound, and records that the item was sought out. It adds 1 unit of demand to the item and increases the Products AMV a tiny bit.

If the Market has sellers, it selects one at random and returns ProductFound with the buyer's and seller's id.



``` mermaid
---
title: Market Find Product State Machine
---
stateDiagram-v2
    sellerCheck: Market Checks for Sellers.
    ProductNotFound: Send ProductNotFound, \n raise product's price.
    ProductFound: Send ProductFound, with seller
    Deal: Buyer and Seller Go through Deal
    TooExpensiveReduction: Reduce Seller Weight.
    OotRed: Reduce Seller Weight,\n modify prices slighly.
    OosClose: Drastically reduce weight.
    DealSuccess: Record Price accepted (Offer - Change), \n modify prices appropriately, \n weight modification
    SuccessReduction: Reduce weight appropriately.
    SuccessAddition: Add to weight Appropriately.

    [*] --> sellerCheck : Market Recieves FindProduct Message
    ProductNotFound --> [*]

    sellerCheck --> ProductNotFound: No Sellers in Market
    sellerCheck --> ProductFound: Seller Found, selected at random.
    ProductFound --> Deal
    Deal --> TooExpensiveReduction: Buyer Returned CloseDeal(TooExpensive)
    TooExpensiveReduction --> [*]
    Deal --> OotRed: Seller returned CloseDeal(OutOfTime)
    OotRed --> [*]

    Deal --> OosClose: Seller returned CloseDeal(OutOfStock)
    OosClose --> [*]

    Deal --> DealSuccess: Seller accepted offer, sends purchase, and any change
    DealSuccess --> SuccessReduction: Price Response was Expensive or overpriced.
    SuccessReduction --> [*]

    DealSuccess --> SuccessAddition: Price Responce was Reasonable, Cheap, or Steal
    SuccessAddition --> [*]
```

Additionally, in an emergency scenario, such as being totally out of a life good, a pop may force through a Product Find. This ActorMessage::EmergencyFind message expands the search and lowers the bar to find. Instead of looking for sellers, they look for pops who might have it. Weight is measured by pop wealth rather than price or stock, as wealthy people are more likely to have resources to spare. 

The logic here is simple, it recieves the EmergencyFind message, pulls from all pops randomly weighted by their per capita wealth, then sends that person's info over. The buyer either succeeds and continues on or fails and tries again, going back to the start.

This could be improved further through the information expansion. 
## Deals In Action

Should the Market send out a ProductFound Message, the buyer and seller mentioned will eventually read it and enter their 'deal' state. 

During the Deal State, both buyer and seller are locked in until the deal is completed. The only things they can do is add messages to their backlog, and act in the deal.

Once they enter we can assume they are in lockstep, they share the same info for the most part. If they send a message to the other, they will wait, reading into the backlog until the next deal message is recieved.

If the Seller is out of stock the seller Sends a CloseDeal{OutOfStock} message and the buyer doesn't wait, and just drops out of the deal. The Market Recieves this message and reduces the weight of the seller for that item as they are out of stock.

If the seller has stock, then the buyer looks at the price and stock, they check the price per unit vs their price per unit budget. If the item is too expensive (x1.5 their budget value) then they'll reject, Sending a CloseDeal{TooExpensive} then leaving. The seller recieves the response back and records it. The Market also recieves the response, and reduces the Sellers weight. Typically, if the Buyer has enough time, they'll try to buy the same item again, going back to the Search Phase.

If the unit price is less than x1.5 the unit price then they'll buy it, but make their opinion known.

Knowing they'll try to buy what they can, they'll select which method of purchase they'll attempt. They can attempt to pay Cash, if the market has currency, Barter, if the target can barter (only pops can), or if all else fails, they'll attempt an AMV Overload.


# Thoughts to take forward and update around

1. Buyers don't have 3 phases of thinking, just 1. Sellers are the ones who deal with the more complex stuff.
2. Everything offered is dealth with in a few ways
    1. Items Both Desired and with an empty slot for the seller get full AMV value.
    2. Items Desired, but no slot to take it get value = (current Salability Value + Full Salability Value) / 2.
    3. Items not desired get their AMV * Salability (min 5%)
3. If what is being asked for from the seller is desired and in a slot, it calculates based around that.
   1. If the items offered for that desire are not desired, they have their AMV reduced by 1/2 again.
   2. If the items offered are desired, but have no slots to accept it, it gets it's AMV from 2.2 (ave. between full and current Salability)
   3. If the item has a slot it's given full AMV, but it's modified by the tier difference between it and what's being asked for.
   4. If the item being requested stretches over multiple tiers, deal with each tier separately, starting from the top.
4. An EmergencyFind message from a pop forces through finding a product. Specifically, it adds in all of the market's pops as well, allowing them to be met then selects from them at random, regardless of whether they say they're selling or not.