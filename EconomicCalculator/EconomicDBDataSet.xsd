<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="EconomicDBDataSet" targetNamespace="http://tempuri.org/EconomicDBDataSet.xsd" xmlns:mstns="http://tempuri.org/EconomicDBDataSet.xsd" xmlns="http://tempuri.org/EconomicDBDataSet.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" xmlns:msprop="urn:schemas-microsoft-com:xml-msprop" attributeFormDefault="qualified" elementFormDefault="qualified">
  <xs:annotation>
    <xs:appinfo source="urn:schemas-microsoft-com:xml-msdatasource">
      <DataSource DefaultConnectionIndex="0" FunctionsComponentName="QueriesTableAdapter" Modifier="AutoLayout, AnsiClass, Class, Public" SchemaSerializationMode="IncludeSchema" xmlns="urn:schemas-microsoft-com:xml-msdatasource">
        <Connections>
          <Connection AppSettingsObjectName="Settings" AppSettingsPropertyName="EconomicDBConnectionString" ConnectionStringObject="" IsAppSettingsProperty="true" Modifier="Assembly" Name="EconomicDBConnectionString (Settings)" ParameterPrefix="@" PropertyReference="ApplicationSettings.EconomicCalculator.Properties.Settings.GlobalReference.Default.EconomicDBConnectionString" Provider="System.Data.SqlClient" />
        </Connections>
        <Tables>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="UnitsTableAdapter" GeneratorDataComponentClassName="UnitsTableAdapter" Name="Units" UserDataComponentName="UnitsTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.Units" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[Units] WHERE (([UnitId] = @Original_UnitId) AND ([Name] = @Original_Name))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_UnitId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="UnitId" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[Units] ([UnitId], [Name]) VALUES (@UnitId, @Name);
SELECT UnitId, Name FROM Units WHERE (UnitId = @UnitId)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@UnitId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="UnitId" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT UnitId, Name FROM dbo.Units</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[Units] SET [UnitId] = @UnitId, [Name] = @Name WHERE (([UnitId] = @Original_UnitId) AND ([Name] = @Original_Name));
SELECT UnitId, Name FROM Units WHERE (UnitId = @UnitId)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@UnitId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="UnitId" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_UnitId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="UnitId" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="UnitId" DataSetColumn="UnitId" />
              <Mapping SourceColumn="Name" DataSetColumn="Name" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="ProductsTableAdapter" GeneratorDataComponentClassName="ProductsTableAdapter" Name="Products" UserDataComponentName="ProductsTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.Products" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[Products] WHERE (([Name] = @Original_Name) AND ([UnitId] = @Original_UnitId) AND ([CurrentPrice] = @Original_CurrentPrice) AND ([MeanTimeToFailure] = @Original_MeanTimeToFailure))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_UnitId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="UnitId" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_CurrentPrice" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="CurrentPrice" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_MeanTimeToFailure" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="MeanTimeToFailure" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[Products] ([Name], [UnitId], [CurrentPrice], [MeanTimeToFailure]) VALUES (@Name, @UnitId, @CurrentPrice, @MeanTimeToFailure);
SELECT Name, UnitId, CurrentPrice, MeanTimeToFailure FROM Products WHERE (Name = @Name)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@UnitId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="UnitId" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@CurrentPrice" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="CurrentPrice" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@MeanTimeToFailure" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="MeanTimeToFailure" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT Name, UnitId, CurrentPrice, MeanTimeToFailure FROM dbo.Products</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[Products] SET [Name] = @Name, [UnitId] = @UnitId, [CurrentPrice] = @CurrentPrice, [MeanTimeToFailure] = @MeanTimeToFailure WHERE (([Name] = @Original_Name) AND ([UnitId] = @Original_UnitId) AND ([CurrentPrice] = @Original_CurrentPrice) AND ([MeanTimeToFailure] = @Original_MeanTimeToFailure));
SELECT Name, UnitId, CurrentPrice, MeanTimeToFailure FROM Products WHERE (Name = @Name)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@UnitId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="UnitId" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@CurrentPrice" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="CurrentPrice" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@MeanTimeToFailure" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="MeanTimeToFailure" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_UnitId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="UnitId" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_CurrentPrice" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="CurrentPrice" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_MeanTimeToFailure" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="MeanTimeToFailure" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="Name" DataSetColumn="Name" />
              <Mapping SourceColumn="UnitId" DataSetColumn="UnitId" />
              <Mapping SourceColumn="CurrentPrice" DataSetColumn="CurrentPrice" />
              <Mapping SourceColumn="MeanTimeToFailure" DataSetColumn="MeanTimeToFailure" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="MinesTableAdapter" GeneratorDataComponentClassName="MinesTableAdapter" Name="Mines" UserDataComponentName="MinesTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.Mines" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[Mines] WHERE (([Name] = @Original_Name) AND ([MineTypeId] = @Original_MineTypeId) AND ([RockTypeId] = @Original_RockTypeId) AND ([LaborRequirements] = @Original_LaborRequirements))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_MineTypeId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="MineTypeId" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_RockTypeId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="RockTypeId" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_LaborRequirements" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="LaborRequirements" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[Mines] ([Name], [MineTypeId], [RockTypeId], [LaborRequirements]) VALUES (@Name, @MineTypeId, @RockTypeId, @LaborRequirements);
SELECT Name, MineTypeId, RockTypeId, LaborRequirements FROM Mines WHERE (Name = @Name)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@MineTypeId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="MineTypeId" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@RockTypeId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="RockTypeId" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@LaborRequirements" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="LaborRequirements" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT Name, MineTypeId, RockTypeId, LaborRequirements FROM dbo.Mines</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[Mines] SET [Name] = @Name, [MineTypeId] = @MineTypeId, [RockTypeId] = @RockTypeId, [LaborRequirements] = @LaborRequirements WHERE (([Name] = @Original_Name) AND ([MineTypeId] = @Original_MineTypeId) AND ([RockTypeId] = @Original_RockTypeId) AND ([LaborRequirements] = @Original_LaborRequirements));
SELECT Name, MineTypeId, RockTypeId, LaborRequirements FROM Mines WHERE (Name = @Name)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@MineTypeId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="MineTypeId" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@RockTypeId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="RockTypeId" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@LaborRequirements" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="LaborRequirements" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_MineTypeId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="MineTypeId" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_RockTypeId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="RockTypeId" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_LaborRequirements" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="LaborRequirements" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="Name" DataSetColumn="Name" />
              <Mapping SourceColumn="MineTypeId" DataSetColumn="MineTypeId" />
              <Mapping SourceColumn="RockTypeId" DataSetColumn="RockTypeId" />
              <Mapping SourceColumn="LaborRequirements" DataSetColumn="LaborRequirements" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="RockTypesTableAdapter" GeneratorDataComponentClassName="RockTypesTableAdapter" Name="RockTypes" UserDataComponentName="RockTypesTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.RockTypes" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[RockTypes] WHERE (([Id] = @Original_Id) AND ([Name] = @Original_Name))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_Id" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="Id" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[RockTypes] ([Id], [Name]) VALUES (@Id, @Name);
SELECT Id, Name FROM RockTypes WHERE (Id = @Id)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Id" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="Id" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT Id, Name FROM dbo.RockTypes</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[RockTypes] SET [Id] = @Id, [Name] = @Name WHERE (([Id] = @Original_Id) AND ([Name] = @Original_Name));
SELECT Id, Name FROM RockTypes WHERE (Id = @Id)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Id" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="Id" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_Id" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="Id" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="Id" DataSetColumn="Id" />
              <Mapping SourceColumn="Name" DataSetColumn="Name" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="MineTypesTableAdapter" GeneratorDataComponentClassName="MineTypesTableAdapter" Name="MineTypes" UserDataComponentName="MineTypesTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.MineTypes" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[MineTypes] WHERE (([Id] = @Original_Id) AND ([Name] = @Original_Name))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_Id" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="Id" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[MineTypes] ([Id], [Name]) VALUES (@Id, @Name);
SELECT Id, Name FROM MineTypes WHERE (Id = @Id)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Id" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="Id" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT Id, Name FROM dbo.MineTypes</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[MineTypes] SET [Id] = @Id, [Name] = @Name WHERE (([Id] = @Original_Id) AND ([Name] = @Original_Name));
SELECT Id, Name FROM MineTypes WHERE (Id = @Id)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Id" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="Id" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_Id" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="Id" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="Id" DataSetColumn="Id" />
              <Mapping SourceColumn="Name" DataSetColumn="Name" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="MineProductsTableAdapter" GeneratorDataComponentClassName="MineProductsTableAdapter" Name="MineProducts" UserDataComponentName="MineProductsTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.MineProducts" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[MineProducts] WHERE (([MineName] = @Original_MineName) AND ([ProductName] = @Original_ProductName) AND ([Amount] = @Original_Amount))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_MineName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MineName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_ProductName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProductName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[MineProducts] ([MineName], [ProductName], [Amount]) VALUES (@MineName, @ProductName, @Amount);
SELECT MineName, ProductName, Amount FROM MineProducts WHERE (MineName = @MineName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@MineName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MineName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@ProductName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProductName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT MineName, ProductName, Amount FROM dbo.MineProducts</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[MineProducts] SET [MineName] = @MineName, [ProductName] = @ProductName, [Amount] = @Amount WHERE (([MineName] = @Original_MineName) AND ([ProductName] = @Original_ProductName) AND ([Amount] = @Original_Amount));
SELECT MineName, ProductName, Amount FROM MineProducts WHERE (MineName = @MineName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@MineName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MineName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@ProductName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProductName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_MineName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MineName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_ProductName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProductName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="MineName" DataSetColumn="MineName" />
              <Mapping SourceColumn="ProductName" DataSetColumn="ProductName" />
              <Mapping SourceColumn="Amount" DataSetColumn="Amount" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="CropsTableAdapter" GeneratorDataComponentClassName="CropsTableAdapter" Name="Crops" UserDataComponentName="CropsTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.Crops" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[Crops] WHERE (([Name] = @Original_Name) AND ([Type] = @Original_Type) AND ([Planting] = @Original_Planting) AND ([Seed] = @Original_Seed) AND ([Labor] = @Original_Labor) AND ([LifeCycle] = @Original_LifeCycle))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="StringFixedLength" Direction="Input" ParameterName="@Original_Type" Precision="0" ProviderType="NChar" Scale="0" Size="0" SourceColumn="Type" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="StringFixedLength" Direction="Input" ParameterName="@Original_Planting" Precision="0" ProviderType="NChar" Scale="0" Size="0" SourceColumn="Planting" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Seed" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Seed" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_Labor" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Labor" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_LifeCycle" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="LifeCycle" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[Crops] ([Name], [Type], [Planting], [Seed], [Labor], [LifeCycle]) VALUES (@Name, @Type, @Planting, @Seed, @Labor, @LifeCycle);
SELECT Name, Type, Planting, Seed, Labor, LifeCycle FROM Crops WHERE (Name = @Name)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="StringFixedLength" Direction="Input" ParameterName="@Type" Precision="0" ProviderType="NChar" Scale="0" Size="0" SourceColumn="Type" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="StringFixedLength" Direction="Input" ParameterName="@Planting" Precision="0" ProviderType="NChar" Scale="0" Size="0" SourceColumn="Planting" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Seed" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Seed" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Labor" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Labor" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@LifeCycle" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="LifeCycle" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT Name, Type, Planting, Seed, Labor, LifeCycle FROM dbo.Crops</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[Crops] SET [Name] = @Name, [Type] = @Type, [Planting] = @Planting, [Seed] = @Seed, [Labor] = @Labor, [LifeCycle] = @LifeCycle WHERE (([Name] = @Original_Name) AND ([Type] = @Original_Type) AND ([Planting] = @Original_Planting) AND ([Seed] = @Original_Seed) AND ([Labor] = @Original_Labor) AND ([LifeCycle] = @Original_LifeCycle));
SELECT Name, Type, Planting, Seed, Labor, LifeCycle FROM Crops WHERE (Name = @Name)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="StringFixedLength" Direction="Input" ParameterName="@Type" Precision="0" ProviderType="NChar" Scale="0" Size="0" SourceColumn="Type" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="StringFixedLength" Direction="Input" ParameterName="@Planting" Precision="0" ProviderType="NChar" Scale="0" Size="0" SourceColumn="Planting" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Seed" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Seed" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Labor" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Labor" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@LifeCycle" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="LifeCycle" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="StringFixedLength" Direction="Input" ParameterName="@Original_Type" Precision="0" ProviderType="NChar" Scale="0" Size="0" SourceColumn="Type" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="StringFixedLength" Direction="Input" ParameterName="@Original_Planting" Precision="0" ProviderType="NChar" Scale="0" Size="0" SourceColumn="Planting" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Seed" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Seed" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_Labor" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Labor" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_LifeCycle" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="LifeCycle" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="Name" DataSetColumn="Name" />
              <Mapping SourceColumn="Type" DataSetColumn="Type" />
              <Mapping SourceColumn="Planting" DataSetColumn="Planting" />
              <Mapping SourceColumn="Seed" DataSetColumn="Seed" />
              <Mapping SourceColumn="Labor" DataSetColumn="Labor" />
              <Mapping SourceColumn="LifeCycle" DataSetColumn="LifeCycle" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="CropOutputsTableAdapter" GeneratorDataComponentClassName="CropOutputsTableAdapter" Name="CropOutputs" UserDataComponentName="CropOutputsTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.CropOutputs" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[CropOutputs] WHERE (([CropName] = @Original_CropName) AND ([OutputProduct] = @Original_OutputProduct) AND ([Amount] = @Original_Amount))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_CropName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="CropName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_OutputProduct" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="OutputProduct" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[CropOutputs] ([CropName], [OutputProduct], [Amount]) VALUES (@CropName, @OutputProduct, @Amount);
SELECT CropName, OutputProduct, Amount FROM CropOutputs WHERE (CropName = @CropName) AND (OutputProduct = @OutputProduct)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@CropName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="CropName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@OutputProduct" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="OutputProduct" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT CropName, OutputProduct, Amount FROM dbo.CropOutputs</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[CropOutputs] SET [CropName] = @CropName, [OutputProduct] = @OutputProduct, [Amount] = @Amount WHERE (([CropName] = @Original_CropName) AND ([OutputProduct] = @Original_OutputProduct) AND ([Amount] = @Original_Amount));
SELECT CropName, OutputProduct, Amount FROM CropOutputs WHERE (CropName = @CropName) AND (OutputProduct = @OutputProduct)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@CropName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="CropName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@OutputProduct" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="OutputProduct" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_CropName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="CropName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_OutputProduct" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="OutputProduct" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="CropName" DataSetColumn="CropName" />
              <Mapping SourceColumn="OutputProduct" DataSetColumn="OutputProduct" />
              <Mapping SourceColumn="Amount" DataSetColumn="Amount" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="ProcessOutputsTableAdapter" GeneratorDataComponentClassName="ProcessOutputsTableAdapter" Name="ProcessOutputs" UserDataComponentName="ProcessOutputsTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.ProcessOutputs" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[ProcessOutputs] WHERE (([ProcessName] = @Original_ProcessName) AND ((@IsNull_OutputName = 1 AND [OutputName] IS NULL) OR ([OutputName] = @Original_OutputName)) AND ((@IsNull_Amount = 1 AND [Amount] IS NULL) OR ([Amount] = @Original_Amount)))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_ProcessName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProcessName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_OutputName" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="OutputName" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_OutputName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="OutputName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_Amount" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[ProcessOutputs] ([ProcessName], [OutputName], [Amount]) VALUES (@ProcessName, @OutputName, @Amount);
SELECT ProcessName, OutputName, Amount FROM ProcessOutputs WHERE (ProcessName = @ProcessName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@ProcessName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProcessName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@OutputName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="OutputName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT ProcessName, OutputName, Amount FROM dbo.ProcessOutputs</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[ProcessOutputs] SET [ProcessName] = @ProcessName, [OutputName] = @OutputName, [Amount] = @Amount WHERE (([ProcessName] = @Original_ProcessName) AND ((@IsNull_OutputName = 1 AND [OutputName] IS NULL) OR ([OutputName] = @Original_OutputName)) AND ((@IsNull_Amount = 1 AND [Amount] IS NULL) OR ([Amount] = @Original_Amount)));
SELECT ProcessName, OutputName, Amount FROM ProcessOutputs WHERE (ProcessName = @ProcessName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@ProcessName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProcessName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@OutputName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="OutputName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_ProcessName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProcessName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_OutputName" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="OutputName" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_OutputName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="OutputName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_Amount" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="ProcessName" DataSetColumn="ProcessName" />
              <Mapping SourceColumn="OutputName" DataSetColumn="OutputName" />
              <Mapping SourceColumn="Amount" DataSetColumn="Amount" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="ProcessInputsTableAdapter" GeneratorDataComponentClassName="ProcessInputsTableAdapter" Name="ProcessInputs" UserDataComponentName="ProcessInputsTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.ProcessInputs" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[ProcessInputs] WHERE (([ProcessName] = @Original_ProcessName) AND ([InputName] = @Original_InputName) AND ([Amount] = @Original_Amount))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_ProcessName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProcessName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_InputName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="InputName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[ProcessInputs] ([ProcessName], [InputName], [Amount]) VALUES (@ProcessName, @InputName, @Amount);
SELECT ProcessName, InputName, Amount FROM ProcessInputs WHERE (ProcessName = @ProcessName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@ProcessName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProcessName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@InputName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="InputName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT ProcessName, InputName, Amount FROM dbo.ProcessInputs</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[ProcessInputs] SET [ProcessName] = @ProcessName, [InputName] = @InputName, [Amount] = @Amount WHERE (([ProcessName] = @Original_ProcessName) AND ([InputName] = @Original_InputName) AND ([Amount] = @Original_Amount));
SELECT ProcessName, InputName, Amount FROM ProcessInputs WHERE (ProcessName = @ProcessName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@ProcessName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProcessName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@InputName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="InputName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_ProcessName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProcessName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_InputName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="InputName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="ProcessName" DataSetColumn="ProcessName" />
              <Mapping SourceColumn="InputName" DataSetColumn="InputName" />
              <Mapping SourceColumn="Amount" DataSetColumn="Amount" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="ProcessesTableAdapter" GeneratorDataComponentClassName="ProcessesTableAdapter" Name="Processes" UserDataComponentName="ProcessesTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.Processes" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[Processes] WHERE (([Name] = @Original_Name) AND ([Labor] = @Original_Labor))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_Labor" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Labor" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[Processes] ([Name], [Labor]) VALUES (@Name, @Labor);
SELECT Name, Labor FROM Processes WHERE (Name = @Name)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Labor" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Labor" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT Name, Labor FROM dbo.Processes</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[Processes] SET [Name] = @Name, [Labor] = @Labor WHERE (([Name] = @Original_Name) AND ([Labor] = @Original_Labor));
SELECT Name, Labor FROM Processes WHERE (Name = @Name)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Labor" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Labor" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_Labor" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Labor" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="Name" DataSetColumn="Name" />
              <Mapping SourceColumn="Labor" DataSetColumn="Labor" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="CurrenciesTableAdapter" GeneratorDataComponentClassName="CurrenciesTableAdapter" Name="Currencies" UserDataComponentName="CurrenciesTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.Currencies" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[Currencies] WHERE (([Name] = @Original_Name) AND ([Cash] = @Original_Cash) AND ((@IsNull_Backing = 1 AND [Backing] IS NULL) OR ([Backing] = @Original_Backing)) AND ([Value] = @Original_Value))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Cash" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Cash" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_Backing" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="Backing" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Backing" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Backing" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_Value" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Value" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[Currencies] ([Name], [Cash], [Backing], [Value]) VALUES (@Name, @Cash, @Backing, @Value);
SELECT Name, Cash, Backing, Value FROM Currencies WHERE (Name = @Name)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Cash" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Cash" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Backing" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Backing" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Value" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Value" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT Name, Cash, Backing, Value FROM dbo.Currencies</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[Currencies] SET [Name] = @Name, [Cash] = @Cash, [Backing] = @Backing, [Value] = @Value WHERE (([Name] = @Original_Name) AND ([Cash] = @Original_Cash) AND ((@IsNull_Backing = 1 AND [Backing] IS NULL) OR ([Backing] = @Original_Backing)) AND ([Value] = @Original_Value));
SELECT Name, Cash, Backing, Value FROM Currencies WHERE (Name = @Name)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Cash" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Cash" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Backing" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Backing" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Value" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Value" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Cash" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Cash" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@IsNull_Backing" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="Backing" SourceColumnNullMapping="true" SourceVersion="Original" />
                      <Parameter AllowDbNull="true" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Backing" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Backing" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_Value" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Value" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="Name" DataSetColumn="Name" />
              <Mapping SourceColumn="Cash" DataSetColumn="Cash" />
              <Mapping SourceColumn="Backing" DataSetColumn="Backing" />
              <Mapping SourceColumn="Value" DataSetColumn="Value" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="MarketCropsTableAdapter" GeneratorDataComponentClassName="MarketCropsTableAdapter" Name="MarketCrops" UserDataComponentName="MarketCropsTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.MarketCrops" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[MarketCrops] WHERE (([MarketName] = @Original_MarketName) AND ([CropName] = @Original_CropName))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_MarketName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MarketName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_CropName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="CropName" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[MarketCrops] ([MarketName], [CropName]) VALUES (@MarketName, @CropName);
SELECT MarketName, CropName FROM MarketCrops WHERE (CropName = @CropName) AND (MarketName = @MarketName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@MarketName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MarketName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@CropName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="CropName" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT MarketName, CropName FROM dbo.MarketCrops</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[MarketCrops] SET [MarketName] = @MarketName, [CropName] = @CropName WHERE (([MarketName] = @Original_MarketName) AND ([CropName] = @Original_CropName));
SELECT MarketName, CropName FROM MarketCrops WHERE (CropName = @CropName) AND (MarketName = @MarketName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@MarketName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MarketName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@CropName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="CropName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_MarketName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MarketName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_CropName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="CropName" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="MarketName" DataSetColumn="MarketName" />
              <Mapping SourceColumn="CropName" DataSetColumn="CropName" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="MarketCurrenciesTableAdapter" GeneratorDataComponentClassName="MarketCurrenciesTableAdapter" Name="MarketCurrencies" UserDataComponentName="MarketCurrenciesTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.MarketCurrencies" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[MarketCurrencies] WHERE (([MarketName] = @Original_MarketName) AND ([CurrencyName] = @Original_CurrencyName))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_MarketName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MarketName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_CurrencyName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="CurrencyName" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[MarketCurrencies] ([MarketName], [CurrencyName]) VALUES (@MarketName, @CurrencyName);
SELECT MarketName, CurrencyName FROM MarketCurrencies WHERE (CurrencyName = @CurrencyName) AND (MarketName = @MarketName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@MarketName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MarketName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@CurrencyName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="CurrencyName" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT MarketName, CurrencyName FROM dbo.MarketCurrencies</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[MarketCurrencies] SET [MarketName] = @MarketName, [CurrencyName] = @CurrencyName WHERE (([MarketName] = @Original_MarketName) AND ([CurrencyName] = @Original_CurrencyName));
SELECT MarketName, CurrencyName FROM MarketCurrencies WHERE (CurrencyName = @CurrencyName) AND (MarketName = @MarketName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@MarketName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MarketName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@CurrencyName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="CurrencyName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_MarketName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MarketName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_CurrencyName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="CurrencyName" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="MarketName" DataSetColumn="MarketName" />
              <Mapping SourceColumn="CurrencyName" DataSetColumn="CurrencyName" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="MarketMinesTableAdapter" GeneratorDataComponentClassName="MarketMinesTableAdapter" Name="MarketMines" UserDataComponentName="MarketMinesTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.MarketMines" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[MarketMines] WHERE (([MarketName] = @Original_MarketName) AND ([MineName] = @Original_MineName))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_MarketName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MarketName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_MineName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MineName" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[MarketMines] ([MarketName], [MineName]) VALUES (@MarketName, @MineName);
SELECT MarketName, MineName FROM MarketMines WHERE (MarketName = @MarketName) AND (MineName = @MineName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@MarketName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MarketName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@MineName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MineName" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT MarketName, MineName FROM dbo.MarketMines</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[MarketMines] SET [MarketName] = @MarketName, [MineName] = @MineName WHERE (([MarketName] = @Original_MarketName) AND ([MineName] = @Original_MineName));
SELECT MarketName, MineName FROM MarketMines WHERE (MarketName = @MarketName) AND (MineName = @MineName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@MarketName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MarketName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@MineName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MineName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_MarketName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MarketName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_MineName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MineName" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="MarketName" DataSetColumn="MarketName" />
              <Mapping SourceColumn="MineName" DataSetColumn="MineName" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="MarketProcessesTableAdapter" GeneratorDataComponentClassName="MarketProcessesTableAdapter" Name="MarketProcesses" UserDataComponentName="MarketProcessesTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.MarketProcesses" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[MarketProcesses] WHERE (([MarketName] = @Original_MarketName) AND ([ProcessName] = @Original_ProcessName))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_MarketName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MarketName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_ProcessName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProcessName" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[MarketProcesses] ([MarketName], [ProcessName]) VALUES (@MarketName, @ProcessName);
SELECT MarketName, ProcessName FROM MarketProcesses WHERE (MarketName = @MarketName) AND (ProcessName = @ProcessName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@MarketName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MarketName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@ProcessName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProcessName" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT MarketName, ProcessName FROM dbo.MarketProcesses</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[MarketProcesses] SET [MarketName] = @MarketName, [ProcessName] = @ProcessName WHERE (([MarketName] = @Original_MarketName) AND ([ProcessName] = @Original_ProcessName));
SELECT MarketName, ProcessName FROM MarketProcesses WHERE (MarketName = @MarketName) AND (ProcessName = @ProcessName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@MarketName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MarketName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@ProcessName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProcessName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_MarketName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MarketName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_ProcessName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProcessName" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="MarketName" DataSetColumn="MarketName" />
              <Mapping SourceColumn="ProcessName" DataSetColumn="ProcessName" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="MarketsTableAdapter" GeneratorDataComponentClassName="MarketsTableAdapter" Name="Markets" UserDataComponentName="MarketsTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.Markets" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[Markets] WHERE (([Name] = @Original_Name) AND ([TotalPopulation] = @Original_TotalPopulation))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_TotalPopulation" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="TotalPopulation" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[Markets] ([Name], [TotalPopulation]) VALUES (@Name, @TotalPopulation);
SELECT Name, TotalPopulation FROM Markets WHERE (Name = @Name)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@TotalPopulation" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="TotalPopulation" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT Name, TotalPopulation FROM dbo.Markets</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[Markets] SET [Name] = @Name, [TotalPopulation] = @TotalPopulation WHERE (([Name] = @Original_Name) AND ([TotalPopulation] = @Original_TotalPopulation));
SELECT Name, TotalPopulation FROM Markets WHERE (Name = @Name)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@TotalPopulation" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="TotalPopulation" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_TotalPopulation" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="TotalPopulation" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="Name" DataSetColumn="Name" />
              <Mapping SourceColumn="TotalPopulation" DataSetColumn="TotalPopulation" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="PopulationsTableAdapter" GeneratorDataComponentClassName="PopulationsTableAdapter" Name="Populations" UserDataComponentName="PopulationsTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.Populations" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[Populations] WHERE (([Name] = @Original_Name) AND ([Count] = @Original_Count) AND ([Job] = @Original_Job))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_Count" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Count" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Job" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Job" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[Populations] ([Name], [Count], [Job]) VALUES (@Name, @Count, @Job);
SELECT Name, Count, Job FROM Populations WHERE (Name = @Name)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Count" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Count" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Job" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Job" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT Name, Count, Job FROM dbo.Populations</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[Populations] SET [Name] = @Name, [Count] = @Count, [Job] = @Job WHERE (([Name] = @Original_Name) AND ([Count] = @Original_Count) AND ([Job] = @Original_Job));
SELECT Name, Count, Job FROM Populations WHERE (Name = @Name)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Count" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Count" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Job" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Job" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Name" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Name" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_Count" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Count" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_Job" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="Job" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="Name" DataSetColumn="Name" />
              <Mapping SourceColumn="Count" DataSetColumn="Count" />
              <Mapping SourceColumn="Job" DataSetColumn="Job" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="MarketPopulationsTableAdapter" GeneratorDataComponentClassName="MarketPopulationsTableAdapter" Name="MarketPopulations" UserDataComponentName="MarketPopulationsTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.MarketPopulations" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[MarketPopulations] WHERE (([MarketName] = @Original_MarketName) AND ([PopulationName] = @Original_PopulationName))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_MarketName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MarketName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_PopulationName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="PopulationName" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[MarketPopulations] ([MarketName], [PopulationName]) VALUES (@MarketName, @PopulationName);
SELECT MarketName, PopulationName FROM MarketPopulations WHERE (MarketName = @MarketName) AND (PopulationName = @PopulationName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@MarketName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MarketName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@PopulationName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="PopulationName" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT MarketName, PopulationName FROM dbo.MarketPopulations</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[MarketPopulations] SET [MarketName] = @MarketName, [PopulationName] = @PopulationName WHERE (([MarketName] = @Original_MarketName) AND ([PopulationName] = @Original_PopulationName));
SELECT MarketName, PopulationName FROM MarketPopulations WHERE (MarketName = @MarketName) AND (PopulationName = @PopulationName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@MarketName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MarketName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@PopulationName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="PopulationName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_MarketName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="MarketName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_PopulationName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="PopulationName" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="MarketName" DataSetColumn="MarketName" />
              <Mapping SourceColumn="PopulationName" DataSetColumn="PopulationName" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="PopulationGoodsTableAdapter" GeneratorDataComponentClassName="PopulationGoodsTableAdapter" Name="PopulationGoods" UserDataComponentName="PopulationGoodsTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.PopulationGoods" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[PopulationGoods] WHERE (([PopulationName] = @Original_PopulationName) AND ([ProductName] = @Original_ProductName) AND ([Amount] = @Original_Amount))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_PopulationName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="PopulationName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_ProductName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProductName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[PopulationGoods] ([PopulationName], [ProductName], [Amount]) VALUES (@PopulationName, @ProductName, @Amount);
SELECT PopulationName, ProductName, Amount FROM PopulationGoods WHERE (PopulationName = @PopulationName) AND (ProductName = @ProductName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@PopulationName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="PopulationName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@ProductName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProductName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT PopulationName, ProductName, Amount FROM dbo.PopulationGoods</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[PopulationGoods] SET [PopulationName] = @PopulationName, [ProductName] = @ProductName, [Amount] = @Amount WHERE (([PopulationName] = @Original_PopulationName) AND ([ProductName] = @Original_ProductName) AND ([Amount] = @Original_Amount));
SELECT PopulationName, ProductName, Amount FROM PopulationGoods WHERE (PopulationName = @PopulationName) AND (ProductName = @ProductName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@PopulationName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="PopulationName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@ProductName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProductName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_PopulationName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="PopulationName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_ProductName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProductName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="PopulationName" DataSetColumn="PopulationName" />
              <Mapping SourceColumn="ProductName" DataSetColumn="ProductName" />
              <Mapping SourceColumn="Amount" DataSetColumn="Amount" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="PopulationLifeNeedsTableAdapter" GeneratorDataComponentClassName="PopulationLifeNeedsTableAdapter" Name="PopulationLifeNeeds" UserDataComponentName="PopulationLifeNeedsTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.PopulationLifeNeeds" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[PopulationLifeNeeds] WHERE (([PopulationName] = @Original_PopulationName) AND ([ProductName] = @Original_ProductName) AND ([Amount] = @Original_Amount))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_PopulationName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="PopulationName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_ProductName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProductName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[PopulationLifeNeeds] ([PopulationName], [ProductName], [Amount]) VALUES (@PopulationName, @ProductName, @Amount);
SELECT PopulationName, ProductName, Amount FROM PopulationLifeNeeds WHERE (PopulationName = @PopulationName) AND (ProductName = @ProductName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@PopulationName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="PopulationName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@ProductName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProductName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT PopulationName, ProductName, Amount FROM dbo.PopulationLifeNeeds</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[PopulationLifeNeeds] SET [PopulationName] = @PopulationName, [ProductName] = @ProductName, [Amount] = @Amount WHERE (([PopulationName] = @Original_PopulationName) AND ([ProductName] = @Original_ProductName) AND ([Amount] = @Original_Amount));
SELECT PopulationName, ProductName, Amount FROM PopulationLifeNeeds WHERE (PopulationName = @PopulationName) AND (ProductName = @ProductName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@PopulationName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="PopulationName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@ProductName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProductName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_PopulationName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="PopulationName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_ProductName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="ProductName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Double" Direction="Input" ParameterName="@Original_Amount" Precision="0" ProviderType="Float" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="PopulationName" DataSetColumn="PopulationName" />
              <Mapping SourceColumn="ProductName" DataSetColumn="ProductName" />
              <Mapping SourceColumn="Amount" DataSetColumn="Amount" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="PopulationMoneyTableAdapter" GeneratorDataComponentClassName="PopulationMoneyTableAdapter" Name="PopulationMoney" UserDataComponentName="PopulationMoneyTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EconomicDBConnectionString (Settings)" DbObjectName="dbo.PopulationMoney" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[PopulationMoney] WHERE (([PopulationName] = @Original_PopulationName) AND ([CurrencyName] = @Original_CurrencyName) AND ([Amount] = @Original_Amount))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_PopulationName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="PopulationName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_CurrencyName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="CurrencyName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="StringFixedLength" Direction="Input" ParameterName="@Original_Amount" Precision="0" ProviderType="NChar" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[PopulationMoney] ([PopulationName], [CurrencyName], [Amount]) VALUES (@PopulationName, @CurrencyName, @Amount);
SELECT PopulationName, CurrencyName, Amount FROM PopulationMoney WHERE (CurrencyName = @CurrencyName) AND (PopulationName = @PopulationName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@PopulationName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="PopulationName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@CurrencyName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="CurrencyName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="StringFixedLength" Direction="Input" ParameterName="@Amount" Precision="0" ProviderType="NChar" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT PopulationName, CurrencyName, Amount FROM dbo.PopulationMoney</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[PopulationMoney] SET [PopulationName] = @PopulationName, [CurrencyName] = @CurrencyName, [Amount] = @Amount WHERE (([PopulationName] = @Original_PopulationName) AND ([CurrencyName] = @Original_CurrencyName) AND ([Amount] = @Original_Amount));
SELECT PopulationName, CurrencyName, Amount FROM PopulationMoney WHERE (CurrencyName = @CurrencyName) AND (PopulationName = @PopulationName)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@PopulationName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="PopulationName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@CurrencyName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="CurrencyName" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="StringFixedLength" Direction="Input" ParameterName="@Amount" Precision="0" ProviderType="NChar" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_PopulationName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="PopulationName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="String" Direction="Input" ParameterName="@Original_CurrencyName" Precision="0" ProviderType="NVarChar" Scale="0" Size="0" SourceColumn="CurrencyName" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="StringFixedLength" Direction="Input" ParameterName="@Original_Amount" Precision="0" ProviderType="NChar" Scale="0" Size="0" SourceColumn="Amount" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="PopulationName" DataSetColumn="PopulationName" />
              <Mapping SourceColumn="CurrencyName" DataSetColumn="CurrencyName" />
              <Mapping SourceColumn="Amount" DataSetColumn="Amount" />
            </Mappings>
            <Sources />
          </TableAdapter>
        </Tables>
        <Sources />
      </DataSource>
    </xs:appinfo>
  </xs:annotation>
  <xs:element name="EconomicDBDataSet" msdata:IsDataSet="true" msdata:UseCurrentLocale="true" msprop:EnableTableAdapterManager="True" msprop:Generator_DataSetName="EconomicDBDataSet" msprop:Generator_UserDSName="EconomicDBDataSet">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Units" msprop:Generator_TableClassName="UnitsDataTable" msprop:Generator_TableVarName="tableUnits" msprop:Generator_TablePropName="Units" msprop:Generator_RowDeletingName="UnitsRowDeleting" msprop:Generator_RowChangingName="UnitsRowChanging" msprop:Generator_RowEvHandlerName="UnitsRowChangeEventHandler" msprop:Generator_RowDeletedName="UnitsRowDeleted" msprop:Generator_UserTableName="Units" msprop:Generator_RowChangedName="UnitsRowChanged" msprop:Generator_RowEvArgName="UnitsRowChangeEvent" msprop:Generator_RowClassName="UnitsRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="UnitId" msprop:Generator_ColumnVarNameInTable="columnUnitId" msprop:Generator_ColumnPropNameInRow="UnitId" msprop:Generator_ColumnPropNameInTable="UnitIdColumn" msprop:Generator_UserColumnName="UnitId" type="xs:int" />
              <xs:element name="Name" msprop:Generator_ColumnVarNameInTable="columnName" msprop:Generator_ColumnPropNameInRow="Name" msprop:Generator_ColumnPropNameInTable="NameColumn" msprop:Generator_UserColumnName="Name">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Products" msprop:Generator_TableClassName="ProductsDataTable" msprop:Generator_TableVarName="tableProducts" msprop:Generator_TablePropName="Products" msprop:Generator_RowDeletingName="ProductsRowDeleting" msprop:Generator_RowChangingName="ProductsRowChanging" msprop:Generator_RowEvHandlerName="ProductsRowChangeEventHandler" msprop:Generator_RowDeletedName="ProductsRowDeleted" msprop:Generator_UserTableName="Products" msprop:Generator_RowChangedName="ProductsRowChanged" msprop:Generator_RowEvArgName="ProductsRowChangeEvent" msprop:Generator_RowClassName="ProductsRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Name" msprop:Generator_ColumnVarNameInTable="columnName" msprop:Generator_ColumnPropNameInRow="Name" msprop:Generator_ColumnPropNameInTable="NameColumn" msprop:Generator_UserColumnName="Name">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="UnitId" msprop:Generator_ColumnVarNameInTable="columnUnitId" msprop:Generator_ColumnPropNameInRow="UnitId" msprop:Generator_ColumnPropNameInTable="UnitIdColumn" msprop:Generator_UserColumnName="UnitId" type="xs:int" />
              <xs:element name="CurrentPrice" msprop:Generator_ColumnVarNameInTable="columnCurrentPrice" msprop:Generator_ColumnPropNameInRow="CurrentPrice" msprop:Generator_ColumnPropNameInTable="CurrentPriceColumn" msprop:Generator_UserColumnName="CurrentPrice" type="xs:double" />
              <xs:element name="MeanTimeToFailure" msprop:Generator_ColumnVarNameInTable="columnMeanTimeToFailure" msprop:Generator_ColumnPropNameInRow="MeanTimeToFailure" msprop:Generator_ColumnPropNameInTable="MeanTimeToFailureColumn" msprop:Generator_UserColumnName="MeanTimeToFailure" type="xs:double" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Mines" msprop:Generator_TableClassName="MinesDataTable" msprop:Generator_TableVarName="tableMines" msprop:Generator_TablePropName="Mines" msprop:Generator_RowDeletingName="MinesRowDeleting" msprop:Generator_RowChangingName="MinesRowChanging" msprop:Generator_RowEvHandlerName="MinesRowChangeEventHandler" msprop:Generator_RowDeletedName="MinesRowDeleted" msprop:Generator_UserTableName="Mines" msprop:Generator_RowChangedName="MinesRowChanged" msprop:Generator_RowEvArgName="MinesRowChangeEvent" msprop:Generator_RowClassName="MinesRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Name" msprop:Generator_ColumnVarNameInTable="columnName" msprop:Generator_ColumnPropNameInRow="Name" msprop:Generator_ColumnPropNameInTable="NameColumn" msprop:Generator_UserColumnName="Name">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="MineTypeId" msprop:Generator_ColumnVarNameInTable="columnMineTypeId" msprop:Generator_ColumnPropNameInRow="MineTypeId" msprop:Generator_ColumnPropNameInTable="MineTypeIdColumn" msprop:Generator_UserColumnName="MineTypeId" type="xs:int" />
              <xs:element name="RockTypeId" msprop:Generator_ColumnVarNameInTable="columnRockTypeId" msprop:Generator_ColumnPropNameInRow="RockTypeId" msprop:Generator_ColumnPropNameInTable="RockTypeIdColumn" msprop:Generator_UserColumnName="RockTypeId" type="xs:int" />
              <xs:element name="LaborRequirements" msprop:Generator_ColumnVarNameInTable="columnLaborRequirements" msprop:Generator_ColumnPropNameInRow="LaborRequirements" msprop:Generator_ColumnPropNameInTable="LaborRequirementsColumn" msprop:Generator_UserColumnName="LaborRequirements" type="xs:double" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="RockTypes" msprop:Generator_TableClassName="RockTypesDataTable" msprop:Generator_TableVarName="tableRockTypes" msprop:Generator_TablePropName="RockTypes" msprop:Generator_RowDeletingName="RockTypesRowDeleting" msprop:Generator_RowChangingName="RockTypesRowChanging" msprop:Generator_RowEvHandlerName="RockTypesRowChangeEventHandler" msprop:Generator_RowDeletedName="RockTypesRowDeleted" msprop:Generator_UserTableName="RockTypes" msprop:Generator_RowChangedName="RockTypesRowChanged" msprop:Generator_RowEvArgName="RockTypesRowChangeEvent" msprop:Generator_RowClassName="RockTypesRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Id" msprop:Generator_ColumnVarNameInTable="columnId" msprop:Generator_ColumnPropNameInRow="Id" msprop:Generator_ColumnPropNameInTable="IdColumn" msprop:Generator_UserColumnName="Id" type="xs:int" />
              <xs:element name="Name" msprop:Generator_ColumnVarNameInTable="columnName" msprop:Generator_ColumnPropNameInRow="Name" msprop:Generator_ColumnPropNameInTable="NameColumn" msprop:Generator_UserColumnName="Name">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="MineTypes" msprop:Generator_TableClassName="MineTypesDataTable" msprop:Generator_TableVarName="tableMineTypes" msprop:Generator_TablePropName="MineTypes" msprop:Generator_RowDeletingName="MineTypesRowDeleting" msprop:Generator_RowChangingName="MineTypesRowChanging" msprop:Generator_RowEvHandlerName="MineTypesRowChangeEventHandler" msprop:Generator_RowDeletedName="MineTypesRowDeleted" msprop:Generator_UserTableName="MineTypes" msprop:Generator_RowChangedName="MineTypesRowChanged" msprop:Generator_RowEvArgName="MineTypesRowChangeEvent" msprop:Generator_RowClassName="MineTypesRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Id" msprop:Generator_ColumnVarNameInTable="columnId" msprop:Generator_ColumnPropNameInRow="Id" msprop:Generator_ColumnPropNameInTable="IdColumn" msprop:Generator_UserColumnName="Id" type="xs:int" />
              <xs:element name="Name" msprop:Generator_ColumnVarNameInTable="columnName" msprop:Generator_ColumnPropNameInRow="Name" msprop:Generator_ColumnPropNameInTable="NameColumn" msprop:Generator_UserColumnName="Name">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="MineProducts" msprop:Generator_TableClassName="MineProductsDataTable" msprop:Generator_TableVarName="tableMineProducts" msprop:Generator_TablePropName="MineProducts" msprop:Generator_RowDeletingName="MineProductsRowDeleting" msprop:Generator_RowChangingName="MineProductsRowChanging" msprop:Generator_RowEvHandlerName="MineProductsRowChangeEventHandler" msprop:Generator_RowDeletedName="MineProductsRowDeleted" msprop:Generator_UserTableName="MineProducts" msprop:Generator_RowChangedName="MineProductsRowChanged" msprop:Generator_RowEvArgName="MineProductsRowChangeEvent" msprop:Generator_RowClassName="MineProductsRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="MineName" msprop:Generator_ColumnVarNameInTable="columnMineName" msprop:Generator_ColumnPropNameInRow="MineName" msprop:Generator_ColumnPropNameInTable="MineNameColumn" msprop:Generator_UserColumnName="MineName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="ProductName" msprop:Generator_ColumnVarNameInTable="columnProductName" msprop:Generator_ColumnPropNameInRow="ProductName" msprop:Generator_ColumnPropNameInTable="ProductNameColumn" msprop:Generator_UserColumnName="ProductName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Amount" msprop:Generator_ColumnVarNameInTable="columnAmount" msprop:Generator_ColumnPropNameInRow="Amount" msprop:Generator_ColumnPropNameInTable="AmountColumn" msprop:Generator_UserColumnName="Amount" type="xs:double" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Crops" msprop:Generator_TableClassName="CropsDataTable" msprop:Generator_TableVarName="tableCrops" msprop:Generator_TablePropName="Crops" msprop:Generator_RowDeletingName="CropsRowDeleting" msprop:Generator_RowChangingName="CropsRowChanging" msprop:Generator_RowEvHandlerName="CropsRowChangeEventHandler" msprop:Generator_RowDeletedName="CropsRowDeleted" msprop:Generator_UserTableName="Crops" msprop:Generator_RowChangedName="CropsRowChanged" msprop:Generator_RowEvArgName="CropsRowChangeEvent" msprop:Generator_RowClassName="CropsRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Name" msprop:Generator_ColumnVarNameInTable="columnName" msprop:Generator_ColumnPropNameInRow="Name" msprop:Generator_ColumnPropNameInTable="NameColumn" msprop:Generator_UserColumnName="Name">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Type" msprop:Generator_ColumnVarNameInTable="columnType" msprop:Generator_ColumnPropNameInRow="Type" msprop:Generator_ColumnPropNameInTable="TypeColumn" msprop:Generator_UserColumnName="Type">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="10" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Planting" msprop:Generator_ColumnVarNameInTable="columnPlanting" msprop:Generator_ColumnPropNameInRow="Planting" msprop:Generator_ColumnPropNameInTable="PlantingColumn" msprop:Generator_UserColumnName="Planting">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="10" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Seed" msprop:Generator_ColumnVarNameInTable="columnSeed" msprop:Generator_ColumnPropNameInRow="Seed" msprop:Generator_ColumnPropNameInTable="SeedColumn" msprop:Generator_UserColumnName="Seed">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Labor" msprop:Generator_ColumnVarNameInTable="columnLabor" msprop:Generator_ColumnPropNameInRow="Labor" msprop:Generator_ColumnPropNameInTable="LaborColumn" msprop:Generator_UserColumnName="Labor" type="xs:double" />
              <xs:element name="LifeCycle" msprop:Generator_ColumnVarNameInTable="columnLifeCycle" msprop:Generator_ColumnPropNameInRow="LifeCycle" msprop:Generator_ColumnPropNameInTable="LifeCycleColumn" msprop:Generator_UserColumnName="LifeCycle" type="xs:int" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="CropOutputs" msprop:Generator_TableClassName="CropOutputsDataTable" msprop:Generator_TableVarName="tableCropOutputs" msprop:Generator_TablePropName="CropOutputs" msprop:Generator_RowDeletingName="CropOutputsRowDeleting" msprop:Generator_RowChangingName="CropOutputsRowChanging" msprop:Generator_RowEvHandlerName="CropOutputsRowChangeEventHandler" msprop:Generator_RowDeletedName="CropOutputsRowDeleted" msprop:Generator_UserTableName="CropOutputs" msprop:Generator_RowChangedName="CropOutputsRowChanged" msprop:Generator_RowEvArgName="CropOutputsRowChangeEvent" msprop:Generator_RowClassName="CropOutputsRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="CropName" msprop:Generator_ColumnVarNameInTable="columnCropName" msprop:Generator_ColumnPropNameInRow="CropName" msprop:Generator_ColumnPropNameInTable="CropNameColumn" msprop:Generator_UserColumnName="CropName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="OutputProduct" msprop:Generator_ColumnVarNameInTable="columnOutputProduct" msprop:Generator_ColumnPropNameInRow="OutputProduct" msprop:Generator_ColumnPropNameInTable="OutputProductColumn" msprop:Generator_UserColumnName="OutputProduct">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Amount" msprop:Generator_ColumnVarNameInTable="columnAmount" msprop:Generator_ColumnPropNameInRow="Amount" msprop:Generator_ColumnPropNameInTable="AmountColumn" msprop:Generator_UserColumnName="Amount" type="xs:double" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="ProcessOutputs" msprop:Generator_TableClassName="ProcessOutputsDataTable" msprop:Generator_TableVarName="tableProcessOutputs" msprop:Generator_TablePropName="ProcessOutputs" msprop:Generator_RowDeletingName="ProcessOutputsRowDeleting" msprop:Generator_RowChangingName="ProcessOutputsRowChanging" msprop:Generator_RowEvHandlerName="ProcessOutputsRowChangeEventHandler" msprop:Generator_RowDeletedName="ProcessOutputsRowDeleted" msprop:Generator_UserTableName="ProcessOutputs" msprop:Generator_RowChangedName="ProcessOutputsRowChanged" msprop:Generator_RowEvArgName="ProcessOutputsRowChangeEvent" msprop:Generator_RowClassName="ProcessOutputsRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="ProcessName" msprop:Generator_ColumnVarNameInTable="columnProcessName" msprop:Generator_ColumnPropNameInRow="ProcessName" msprop:Generator_ColumnPropNameInTable="ProcessNameColumn" msprop:Generator_UserColumnName="ProcessName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="OutputName" msprop:Generator_ColumnVarNameInTable="columnOutputName" msprop:Generator_ColumnPropNameInRow="OutputName" msprop:Generator_ColumnPropNameInTable="OutputNameColumn" msprop:Generator_UserColumnName="OutputName" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Amount" msprop:Generator_ColumnVarNameInTable="columnAmount" msprop:Generator_ColumnPropNameInRow="Amount" msprop:Generator_ColumnPropNameInTable="AmountColumn" msprop:Generator_UserColumnName="Amount" type="xs:double" minOccurs="0" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="ProcessInputs" msprop:Generator_TableClassName="ProcessInputsDataTable" msprop:Generator_TableVarName="tableProcessInputs" msprop:Generator_TablePropName="ProcessInputs" msprop:Generator_RowDeletingName="ProcessInputsRowDeleting" msprop:Generator_RowChangingName="ProcessInputsRowChanging" msprop:Generator_RowEvHandlerName="ProcessInputsRowChangeEventHandler" msprop:Generator_RowDeletedName="ProcessInputsRowDeleted" msprop:Generator_UserTableName="ProcessInputs" msprop:Generator_RowChangedName="ProcessInputsRowChanged" msprop:Generator_RowEvArgName="ProcessInputsRowChangeEvent" msprop:Generator_RowClassName="ProcessInputsRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="ProcessName" msprop:Generator_ColumnVarNameInTable="columnProcessName" msprop:Generator_ColumnPropNameInRow="ProcessName" msprop:Generator_ColumnPropNameInTable="ProcessNameColumn" msprop:Generator_UserColumnName="ProcessName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="InputName" msprop:Generator_ColumnVarNameInTable="columnInputName" msprop:Generator_ColumnPropNameInRow="InputName" msprop:Generator_ColumnPropNameInTable="InputNameColumn" msprop:Generator_UserColumnName="InputName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Amount" msprop:Generator_ColumnVarNameInTable="columnAmount" msprop:Generator_ColumnPropNameInRow="Amount" msprop:Generator_ColumnPropNameInTable="AmountColumn" msprop:Generator_UserColumnName="Amount" type="xs:double" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Processes" msprop:Generator_TableClassName="ProcessesDataTable" msprop:Generator_TableVarName="tableProcesses" msprop:Generator_TablePropName="Processes" msprop:Generator_RowDeletingName="ProcessesRowDeleting" msprop:Generator_RowChangingName="ProcessesRowChanging" msprop:Generator_RowEvHandlerName="ProcessesRowChangeEventHandler" msprop:Generator_RowDeletedName="ProcessesRowDeleted" msprop:Generator_UserTableName="Processes" msprop:Generator_RowChangedName="ProcessesRowChanged" msprop:Generator_RowEvArgName="ProcessesRowChangeEvent" msprop:Generator_RowClassName="ProcessesRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Name" msprop:Generator_ColumnVarNameInTable="columnName" msprop:Generator_ColumnPropNameInRow="Name" msprop:Generator_ColumnPropNameInTable="NameColumn" msprop:Generator_UserColumnName="Name">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Labor" msprop:Generator_ColumnVarNameInTable="columnLabor" msprop:Generator_ColumnPropNameInRow="Labor" msprop:Generator_ColumnPropNameInTable="LaborColumn" msprop:Generator_UserColumnName="Labor" type="xs:double" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Currencies" msprop:Generator_TableClassName="CurrenciesDataTable" msprop:Generator_TableVarName="tableCurrencies" msprop:Generator_TablePropName="Currencies" msprop:Generator_RowDeletingName="CurrenciesRowDeleting" msprop:Generator_RowChangingName="CurrenciesRowChanging" msprop:Generator_RowEvHandlerName="CurrenciesRowChangeEventHandler" msprop:Generator_RowDeletedName="CurrenciesRowDeleted" msprop:Generator_UserTableName="Currencies" msprop:Generator_RowChangedName="CurrenciesRowChanged" msprop:Generator_RowEvArgName="CurrenciesRowChangeEvent" msprop:Generator_RowClassName="CurrenciesRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Name" msprop:Generator_ColumnVarNameInTable="columnName" msprop:Generator_ColumnPropNameInRow="Name" msprop:Generator_ColumnPropNameInTable="NameColumn" msprop:Generator_UserColumnName="Name">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Cash" msprop:Generator_ColumnVarNameInTable="columnCash" msprop:Generator_ColumnPropNameInRow="Cash" msprop:Generator_ColumnPropNameInTable="CashColumn" msprop:Generator_UserColumnName="Cash">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Backing" msprop:Generator_ColumnVarNameInTable="columnBacking" msprop:Generator_ColumnPropNameInRow="Backing" msprop:Generator_ColumnPropNameInTable="BackingColumn" msprop:Generator_UserColumnName="Backing" minOccurs="0">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Value" msprop:Generator_ColumnVarNameInTable="columnValue" msprop:Generator_ColumnPropNameInRow="Value" msprop:Generator_ColumnPropNameInTable="ValueColumn" msprop:Generator_UserColumnName="Value" type="xs:double" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="MarketCrops" msprop:Generator_TableClassName="MarketCropsDataTable" msprop:Generator_TableVarName="tableMarketCrops" msprop:Generator_TablePropName="MarketCrops" msprop:Generator_RowDeletingName="MarketCropsRowDeleting" msprop:Generator_RowChangingName="MarketCropsRowChanging" msprop:Generator_RowEvHandlerName="MarketCropsRowChangeEventHandler" msprop:Generator_RowDeletedName="MarketCropsRowDeleted" msprop:Generator_UserTableName="MarketCrops" msprop:Generator_RowChangedName="MarketCropsRowChanged" msprop:Generator_RowEvArgName="MarketCropsRowChangeEvent" msprop:Generator_RowClassName="MarketCropsRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="MarketName" msprop:Generator_ColumnVarNameInTable="columnMarketName" msprop:Generator_ColumnPropNameInRow="MarketName" msprop:Generator_ColumnPropNameInTable="MarketNameColumn" msprop:Generator_UserColumnName="MarketName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="CropName" msprop:Generator_ColumnVarNameInTable="columnCropName" msprop:Generator_ColumnPropNameInRow="CropName" msprop:Generator_ColumnPropNameInTable="CropNameColumn" msprop:Generator_UserColumnName="CropName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="MarketCurrencies" msprop:Generator_TableClassName="MarketCurrenciesDataTable" msprop:Generator_TableVarName="tableMarketCurrencies" msprop:Generator_TablePropName="MarketCurrencies" msprop:Generator_RowDeletingName="MarketCurrenciesRowDeleting" msprop:Generator_RowChangingName="MarketCurrenciesRowChanging" msprop:Generator_RowEvHandlerName="MarketCurrenciesRowChangeEventHandler" msprop:Generator_RowDeletedName="MarketCurrenciesRowDeleted" msprop:Generator_UserTableName="MarketCurrencies" msprop:Generator_RowChangedName="MarketCurrenciesRowChanged" msprop:Generator_RowEvArgName="MarketCurrenciesRowChangeEvent" msprop:Generator_RowClassName="MarketCurrenciesRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="MarketName" msprop:Generator_ColumnVarNameInTable="columnMarketName" msprop:Generator_ColumnPropNameInRow="MarketName" msprop:Generator_ColumnPropNameInTable="MarketNameColumn" msprop:Generator_UserColumnName="MarketName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="CurrencyName" msprop:Generator_ColumnVarNameInTable="columnCurrencyName" msprop:Generator_ColumnPropNameInRow="CurrencyName" msprop:Generator_ColumnPropNameInTable="CurrencyNameColumn" msprop:Generator_UserColumnName="CurrencyName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="MarketMines" msprop:Generator_TableClassName="MarketMinesDataTable" msprop:Generator_TableVarName="tableMarketMines" msprop:Generator_TablePropName="MarketMines" msprop:Generator_RowDeletingName="MarketMinesRowDeleting" msprop:Generator_RowChangingName="MarketMinesRowChanging" msprop:Generator_RowEvHandlerName="MarketMinesRowChangeEventHandler" msprop:Generator_RowDeletedName="MarketMinesRowDeleted" msprop:Generator_UserTableName="MarketMines" msprop:Generator_RowChangedName="MarketMinesRowChanged" msprop:Generator_RowEvArgName="MarketMinesRowChangeEvent" msprop:Generator_RowClassName="MarketMinesRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="MarketName" msprop:Generator_ColumnVarNameInTable="columnMarketName" msprop:Generator_ColumnPropNameInRow="MarketName" msprop:Generator_ColumnPropNameInTable="MarketNameColumn" msprop:Generator_UserColumnName="MarketName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="MineName" msprop:Generator_ColumnVarNameInTable="columnMineName" msprop:Generator_ColumnPropNameInRow="MineName" msprop:Generator_ColumnPropNameInTable="MineNameColumn" msprop:Generator_UserColumnName="MineName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="MarketProcesses" msprop:Generator_TableClassName="MarketProcessesDataTable" msprop:Generator_TableVarName="tableMarketProcesses" msprop:Generator_TablePropName="MarketProcesses" msprop:Generator_RowDeletingName="MarketProcessesRowDeleting" msprop:Generator_RowChangingName="MarketProcessesRowChanging" msprop:Generator_RowEvHandlerName="MarketProcessesRowChangeEventHandler" msprop:Generator_RowDeletedName="MarketProcessesRowDeleted" msprop:Generator_UserTableName="MarketProcesses" msprop:Generator_RowChangedName="MarketProcessesRowChanged" msprop:Generator_RowEvArgName="MarketProcessesRowChangeEvent" msprop:Generator_RowClassName="MarketProcessesRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="MarketName" msprop:Generator_ColumnVarNameInTable="columnMarketName" msprop:Generator_ColumnPropNameInRow="MarketName" msprop:Generator_ColumnPropNameInTable="MarketNameColumn" msprop:Generator_UserColumnName="MarketName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="ProcessName" msprop:Generator_ColumnVarNameInTable="columnProcessName" msprop:Generator_ColumnPropNameInRow="ProcessName" msprop:Generator_ColumnPropNameInTable="ProcessNameColumn" msprop:Generator_UserColumnName="ProcessName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Markets" msprop:Generator_TableClassName="MarketsDataTable" msprop:Generator_TableVarName="tableMarkets" msprop:Generator_TablePropName="Markets" msprop:Generator_RowDeletingName="MarketsRowDeleting" msprop:Generator_RowChangingName="MarketsRowChanging" msprop:Generator_RowEvHandlerName="MarketsRowChangeEventHandler" msprop:Generator_RowDeletedName="MarketsRowDeleted" msprop:Generator_UserTableName="Markets" msprop:Generator_RowChangedName="MarketsRowChanged" msprop:Generator_RowEvArgName="MarketsRowChangeEvent" msprop:Generator_RowClassName="MarketsRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Name" msprop:Generator_ColumnVarNameInTable="columnName" msprop:Generator_ColumnPropNameInRow="Name" msprop:Generator_ColumnPropNameInTable="NameColumn" msprop:Generator_UserColumnName="Name">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="TotalPopulation" msprop:Generator_ColumnVarNameInTable="columnTotalPopulation" msprop:Generator_ColumnPropNameInRow="TotalPopulation" msprop:Generator_ColumnPropNameInTable="TotalPopulationColumn" msprop:Generator_UserColumnName="TotalPopulation" type="xs:double" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Populations" msprop:Generator_TableClassName="PopulationsDataTable" msprop:Generator_TableVarName="tablePopulations" msprop:Generator_TablePropName="Populations" msprop:Generator_RowDeletingName="PopulationsRowDeleting" msprop:Generator_RowChangingName="PopulationsRowChanging" msprop:Generator_RowEvHandlerName="PopulationsRowChangeEventHandler" msprop:Generator_RowDeletedName="PopulationsRowDeleted" msprop:Generator_UserTableName="Populations" msprop:Generator_RowChangedName="PopulationsRowChanged" msprop:Generator_RowEvArgName="PopulationsRowChangeEvent" msprop:Generator_RowClassName="PopulationsRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Name" msprop:Generator_ColumnVarNameInTable="columnName" msprop:Generator_ColumnPropNameInRow="Name" msprop:Generator_ColumnPropNameInTable="NameColumn" msprop:Generator_UserColumnName="Name">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Count" msprop:Generator_ColumnVarNameInTable="columnCount" msprop:Generator_ColumnPropNameInRow="Count" msprop:Generator_ColumnPropNameInTable="CountColumn" msprop:Generator_UserColumnName="Count" type="xs:double" />
              <xs:element name="Job" msprop:Generator_ColumnVarNameInTable="columnJob" msprop:Generator_ColumnPropNameInRow="Job" msprop:Generator_ColumnPropNameInTable="JobColumn" msprop:Generator_UserColumnName="Job">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="MarketPopulations" msprop:Generator_TableClassName="MarketPopulationsDataTable" msprop:Generator_TableVarName="tableMarketPopulations" msprop:Generator_TablePropName="MarketPopulations" msprop:Generator_RowDeletingName="MarketPopulationsRowDeleting" msprop:Generator_RowChangingName="MarketPopulationsRowChanging" msprop:Generator_RowEvHandlerName="MarketPopulationsRowChangeEventHandler" msprop:Generator_RowDeletedName="MarketPopulationsRowDeleted" msprop:Generator_UserTableName="MarketPopulations" msprop:Generator_RowChangedName="MarketPopulationsRowChanged" msprop:Generator_RowEvArgName="MarketPopulationsRowChangeEvent" msprop:Generator_RowClassName="MarketPopulationsRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="MarketName" msprop:Generator_ColumnVarNameInTable="columnMarketName" msprop:Generator_ColumnPropNameInRow="MarketName" msprop:Generator_ColumnPropNameInTable="MarketNameColumn" msprop:Generator_UserColumnName="MarketName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="PopulationName" msprop:Generator_ColumnVarNameInTable="columnPopulationName" msprop:Generator_ColumnPropNameInRow="PopulationName" msprop:Generator_ColumnPropNameInTable="PopulationNameColumn" msprop:Generator_UserColumnName="PopulationName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="PopulationGoods" msprop:Generator_TableClassName="PopulationGoodsDataTable" msprop:Generator_TableVarName="tablePopulationGoods" msprop:Generator_TablePropName="PopulationGoods" msprop:Generator_RowDeletingName="PopulationGoodsRowDeleting" msprop:Generator_RowChangingName="PopulationGoodsRowChanging" msprop:Generator_RowEvHandlerName="PopulationGoodsRowChangeEventHandler" msprop:Generator_RowDeletedName="PopulationGoodsRowDeleted" msprop:Generator_UserTableName="PopulationGoods" msprop:Generator_RowChangedName="PopulationGoodsRowChanged" msprop:Generator_RowEvArgName="PopulationGoodsRowChangeEvent" msprop:Generator_RowClassName="PopulationGoodsRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="PopulationName" msprop:Generator_ColumnVarNameInTable="columnPopulationName" msprop:Generator_ColumnPropNameInRow="PopulationName" msprop:Generator_ColumnPropNameInTable="PopulationNameColumn" msprop:Generator_UserColumnName="PopulationName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="ProductName" msprop:Generator_ColumnVarNameInTable="columnProductName" msprop:Generator_ColumnPropNameInRow="ProductName" msprop:Generator_ColumnPropNameInTable="ProductNameColumn" msprop:Generator_UserColumnName="ProductName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Amount" msprop:Generator_ColumnVarNameInTable="columnAmount" msprop:Generator_ColumnPropNameInRow="Amount" msprop:Generator_ColumnPropNameInTable="AmountColumn" msprop:Generator_UserColumnName="Amount" type="xs:double" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="PopulationLifeNeeds" msprop:Generator_TableClassName="PopulationLifeNeedsDataTable" msprop:Generator_TableVarName="tablePopulationLifeNeeds" msprop:Generator_TablePropName="PopulationLifeNeeds" msprop:Generator_RowDeletingName="PopulationLifeNeedsRowDeleting" msprop:Generator_RowChangingName="PopulationLifeNeedsRowChanging" msprop:Generator_RowEvHandlerName="PopulationLifeNeedsRowChangeEventHandler" msprop:Generator_RowDeletedName="PopulationLifeNeedsRowDeleted" msprop:Generator_UserTableName="PopulationLifeNeeds" msprop:Generator_RowChangedName="PopulationLifeNeedsRowChanged" msprop:Generator_RowEvArgName="PopulationLifeNeedsRowChangeEvent" msprop:Generator_RowClassName="PopulationLifeNeedsRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="PopulationName" msprop:Generator_ColumnVarNameInTable="columnPopulationName" msprop:Generator_ColumnPropNameInRow="PopulationName" msprop:Generator_ColumnPropNameInTable="PopulationNameColumn" msprop:Generator_UserColumnName="PopulationName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="ProductName" msprop:Generator_ColumnVarNameInTable="columnProductName" msprop:Generator_ColumnPropNameInRow="ProductName" msprop:Generator_ColumnPropNameInTable="ProductNameColumn" msprop:Generator_UserColumnName="ProductName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Amount" msprop:Generator_ColumnVarNameInTable="columnAmount" msprop:Generator_ColumnPropNameInRow="Amount" msprop:Generator_ColumnPropNameInTable="AmountColumn" msprop:Generator_UserColumnName="Amount" type="xs:double" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="PopulationMoney" msprop:Generator_TableClassName="PopulationMoneyDataTable" msprop:Generator_TableVarName="tablePopulationMoney" msprop:Generator_TablePropName="PopulationMoney" msprop:Generator_RowDeletingName="PopulationMoneyRowDeleting" msprop:Generator_RowChangingName="PopulationMoneyRowChanging" msprop:Generator_RowEvHandlerName="PopulationMoneyRowChangeEventHandler" msprop:Generator_RowDeletedName="PopulationMoneyRowDeleted" msprop:Generator_UserTableName="PopulationMoney" msprop:Generator_RowChangedName="PopulationMoneyRowChanged" msprop:Generator_RowEvArgName="PopulationMoneyRowChangeEvent" msprop:Generator_RowClassName="PopulationMoneyRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="PopulationName" msprop:Generator_ColumnVarNameInTable="columnPopulationName" msprop:Generator_ColumnPropNameInRow="PopulationName" msprop:Generator_ColumnPropNameInTable="PopulationNameColumn" msprop:Generator_UserColumnName="PopulationName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="CurrencyName" msprop:Generator_ColumnVarNameInTable="columnCurrencyName" msprop:Generator_ColumnPropNameInRow="CurrencyName" msprop:Generator_ColumnPropNameInTable="CurrencyNameColumn" msprop:Generator_UserColumnName="CurrencyName">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="20" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
              <xs:element name="Amount" msprop:Generator_ColumnVarNameInTable="columnAmount" msprop:Generator_ColumnPropNameInRow="Amount" msprop:Generator_ColumnPropNameInTable="AmountColumn" msprop:Generator_UserColumnName="Amount">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="10" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
    <xs:unique name="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:Units" />
      <xs:field xpath="mstns:UnitId" />
    </xs:unique>
    <xs:unique name="Products_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:Products" />
      <xs:field xpath="mstns:Name" />
    </xs:unique>
    <xs:unique name="Mines_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:Mines" />
      <xs:field xpath="mstns:Name" />
    </xs:unique>
    <xs:unique name="RockTypes_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:RockTypes" />
      <xs:field xpath="mstns:Id" />
    </xs:unique>
    <xs:unique name="MineTypes_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:MineTypes" />
      <xs:field xpath="mstns:Id" />
    </xs:unique>
    <xs:unique name="MineProducts_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:MineProducts" />
      <xs:field xpath="mstns:MineName" />
    </xs:unique>
    <xs:unique name="Crops_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:Crops" />
      <xs:field xpath="mstns:Name" />
    </xs:unique>
    <xs:unique name="CropOutputs_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:CropOutputs" />
      <xs:field xpath="mstns:CropName" />
      <xs:field xpath="mstns:OutputProduct" />
    </xs:unique>
    <xs:unique name="ProcessOutputs_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:ProcessOutputs" />
      <xs:field xpath="mstns:ProcessName" />
    </xs:unique>
    <xs:unique name="ProcessInputs_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:ProcessInputs" />
      <xs:field xpath="mstns:ProcessName" />
    </xs:unique>
    <xs:unique name="Processes_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:Processes" />
      <xs:field xpath="mstns:Name" />
    </xs:unique>
    <xs:unique name="Currencies_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:Currencies" />
      <xs:field xpath="mstns:Name" />
    </xs:unique>
    <xs:unique name="MarketCrops_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:MarketCrops" />
      <xs:field xpath="mstns:MarketName" />
      <xs:field xpath="mstns:CropName" />
    </xs:unique>
    <xs:unique name="MarketCurrencies_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:MarketCurrencies" />
      <xs:field xpath="mstns:MarketName" />
      <xs:field xpath="mstns:CurrencyName" />
    </xs:unique>
    <xs:unique name="MarketMines_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:MarketMines" />
      <xs:field xpath="mstns:MarketName" />
      <xs:field xpath="mstns:MineName" />
    </xs:unique>
    <xs:unique name="MarketProcesses_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:MarketProcesses" />
      <xs:field xpath="mstns:MarketName" />
      <xs:field xpath="mstns:ProcessName" />
    </xs:unique>
    <xs:unique name="Markets_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:Markets" />
      <xs:field xpath="mstns:Name" />
    </xs:unique>
    <xs:unique name="Populations_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:Populations" />
      <xs:field xpath="mstns:Name" />
    </xs:unique>
    <xs:unique name="MarketPopulations_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:MarketPopulations" />
      <xs:field xpath="mstns:MarketName" />
      <xs:field xpath="mstns:PopulationName" />
    </xs:unique>
    <xs:unique name="PopulationGoods_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:PopulationGoods" />
      <xs:field xpath="mstns:PopulationName" />
      <xs:field xpath="mstns:ProductName" />
    </xs:unique>
    <xs:unique name="PopulationLifeNeeds_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:PopulationLifeNeeds" />
      <xs:field xpath="mstns:PopulationName" />
      <xs:field xpath="mstns:ProductName" />
    </xs:unique>
    <xs:unique name="PopulationMoney_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:PopulationMoney" />
      <xs:field xpath="mstns:PopulationName" />
      <xs:field xpath="mstns:CurrencyName" />
    </xs:unique>
  </xs:element>
  <xs:annotation>
    <xs:appinfo>
      <msdata:Relationship name="FK_Products_ToUnits" msdata:parent="Units" msdata:child="Products" msdata:parentkey="UnitId" msdata:childkey="UnitId" msprop:Generator_UserChildTable="Products" msprop:Generator_ChildPropName="GetProductsRows" msprop:Generator_UserRelationName="FK_Products_ToUnits" msprop:Generator_ParentPropName="UnitsRow" msprop:Generator_RelationVarName="relationFK_Products_ToUnits" msprop:Generator_UserParentTable="Units" />
      <msdata:Relationship name="FK_Mines_ToRockTypes" msdata:parent="RockTypes" msdata:child="Mines" msdata:parentkey="Id" msdata:childkey="RockTypeId" msprop:Generator_UserChildTable="Mines" msprop:Generator_ChildPropName="GetMinesRows" msprop:Generator_UserRelationName="FK_Mines_ToRockTypes" msprop:Generator_RelationVarName="relationFK_Mines_ToRockTypes" msprop:Generator_UserParentTable="RockTypes" msprop:Generator_ParentPropName="RockTypesRow" />
      <msdata:Relationship name="FK_Mines_ToMineTypes" msdata:parent="MineTypes" msdata:child="Mines" msdata:parentkey="Id" msdata:childkey="MineTypeId" msprop:Generator_UserChildTable="Mines" msprop:Generator_ChildPropName="GetMinesRows" msprop:Generator_UserRelationName="FK_Mines_ToMineTypes" msprop:Generator_RelationVarName="relationFK_Mines_ToMineTypes" msprop:Generator_UserParentTable="MineTypes" msprop:Generator_ParentPropName="MineTypesRow" />
      <msdata:Relationship name="FK_MineProducts_ToMines" msdata:parent="Mines" msdata:child="MineProducts" msdata:parentkey="Name" msdata:childkey="MineName" msprop:Generator_UserChildTable="MineProducts" msprop:Generator_ChildPropName="GetMineProductsRows" msprop:Generator_UserRelationName="FK_MineProducts_ToMines" msprop:Generator_ParentPropName="MinesRow" msprop:Generator_RelationVarName="relationFK_MineProducts_ToMines" msprop:Generator_UserParentTable="Mines" />
      <msdata:Relationship name="FK_MineProducts_ToProducts" msdata:parent="Products" msdata:child="MineProducts" msdata:parentkey="Name" msdata:childkey="ProductName" msprop:Generator_UserChildTable="MineProducts" msprop:Generator_ChildPropName="GetMineProductsRows" msprop:Generator_UserRelationName="FK_MineProducts_ToProducts" msprop:Generator_ParentPropName="ProductsRow" msprop:Generator_RelationVarName="relationFK_MineProducts_ToProducts" msprop:Generator_UserParentTable="Products" />
      <msdata:Relationship name="FK_Crops_SeedProducts" msdata:parent="Products" msdata:child="Crops" msdata:parentkey="Name" msdata:childkey="Seed" msprop:Generator_UserChildTable="Crops" msprop:Generator_ChildPropName="GetCropsRows" msprop:Generator_UserRelationName="FK_Crops_SeedProducts" msprop:Generator_ParentPropName="ProductsRow" msprop:Generator_RelationVarName="relationFK_Crops_SeedProducts" msprop:Generator_UserParentTable="Products" />
      <msdata:Relationship name="FK_CropOutputs_ToCrops" msdata:parent="Crops" msdata:child="CropOutputs" msdata:parentkey="Name" msdata:childkey="CropName" msprop:Generator_UserChildTable="CropOutputs" msprop:Generator_ChildPropName="GetCropOutputsRows" msprop:Generator_UserRelationName="FK_CropOutputs_ToCrops" msprop:Generator_ParentPropName="CropsRow" msprop:Generator_RelationVarName="relationFK_CropOutputs_ToCrops" msprop:Generator_UserParentTable="Crops" />
      <msdata:Relationship name="FK_CropOutputs_ToProducts" msdata:parent="Products" msdata:child="CropOutputs" msdata:parentkey="Name" msdata:childkey="OutputProduct" msprop:Generator_UserChildTable="CropOutputs" msprop:Generator_ChildPropName="GetCropOutputsRows" msprop:Generator_UserRelationName="FK_CropOutputs_ToProducts" msprop:Generator_ParentPropName="ProductsRow" msprop:Generator_RelationVarName="relationFK_CropOutputs_ToProducts" msprop:Generator_UserParentTable="Products" />
      <msdata:Relationship name="FK_ProcessOutputs_ToProducts" msdata:parent="Products" msdata:child="ProcessOutputs" msdata:parentkey="Name" msdata:childkey="OutputName" msprop:Generator_UserChildTable="ProcessOutputs" msprop:Generator_ChildPropName="GetProcessOutputsRows" msprop:Generator_UserRelationName="FK_ProcessOutputs_ToProducts" msprop:Generator_ParentPropName="ProductsRow" msprop:Generator_RelationVarName="relationFK_ProcessOutputs_ToProducts" msprop:Generator_UserParentTable="Products" />
      <msdata:Relationship name="FK_ProcessInputs_ToProducts" msdata:parent="Products" msdata:child="ProcessInputs" msdata:parentkey="Name" msdata:childkey="InputName" msprop:Generator_UserChildTable="ProcessInputs" msprop:Generator_ChildPropName="GetProcessInputsRows" msprop:Generator_UserRelationName="FK_ProcessInputs_ToProducts" msprop:Generator_ParentPropName="ProductsRow" msprop:Generator_RelationVarName="relationFK_ProcessInputs_ToProducts" msprop:Generator_UserParentTable="Products" />
      <msdata:Relationship name="FK_ProcessOutputs_ToProcess" msdata:parent="Processes" msdata:child="ProcessOutputs" msdata:parentkey="Name" msdata:childkey="ProcessName" msprop:Generator_UserChildTable="ProcessOutputs" msprop:Generator_ChildPropName="GetProcessOutputsRows" msprop:Generator_UserRelationName="FK_ProcessOutputs_ToProcess" msprop:Generator_RelationVarName="relationFK_ProcessOutputs_ToProcess" msprop:Generator_UserParentTable="Processes" msprop:Generator_ParentPropName="ProcessesRow" />
      <msdata:Relationship name="FK_ProcessInputs_ToProcesses" msdata:parent="Processes" msdata:child="ProcessInputs" msdata:parentkey="Name" msdata:childkey="ProcessName" msprop:Generator_UserChildTable="ProcessInputs" msprop:Generator_ChildPropName="GetProcessInputsRows" msprop:Generator_UserRelationName="FK_ProcessInputs_ToProcesses" msprop:Generator_RelationVarName="relationFK_ProcessInputs_ToProcesses" msprop:Generator_UserParentTable="Processes" msprop:Generator_ParentPropName="ProcessesRow" />
      <msdata:Relationship name="FK_Currencies_BackingProduct" msdata:parent="Products" msdata:child="Currencies" msdata:parentkey="Name" msdata:childkey="Backing" msprop:Generator_UserChildTable="Currencies" msprop:Generator_ChildPropName="GetCurrenciesRowsByFK_Currencies_BackingProduct" msprop:Generator_UserRelationName="FK_Currencies_BackingProduct" msprop:Generator_ParentPropName="ProductsRowByFK_Currencies_BackingProduct" msprop:Generator_RelationVarName="relationFK_Currencies_BackingProduct" msprop:Generator_UserParentTable="Products" />
      <msdata:Relationship name="FK_Currencies_CashProduct" msdata:parent="Products" msdata:child="Currencies" msdata:parentkey="Name" msdata:childkey="Cash" msprop:Generator_UserChildTable="Currencies" msprop:Generator_ChildPropName="GetCurrenciesRowsByFK_Currencies_CashProduct" msprop:Generator_UserRelationName="FK_Currencies_CashProduct" msprop:Generator_ParentPropName="ProductsRowByFK_Currencies_CashProduct" msprop:Generator_RelationVarName="relationFK_Currencies_CashProduct" msprop:Generator_UserParentTable="Products" />
      <msdata:Relationship name="FK_MarketCrops_ToCrops" msdata:parent="Crops" msdata:child="MarketCrops" msdata:parentkey="Name" msdata:childkey="CropName" msprop:Generator_UserChildTable="MarketCrops" msprop:Generator_ChildPropName="GetMarketCropsRows" msprop:Generator_UserRelationName="FK_MarketCrops_ToCrops" msprop:Generator_ParentPropName="CropsRow" msprop:Generator_RelationVarName="relationFK_MarketCrops_ToCrops" msprop:Generator_UserParentTable="Crops" />
      <msdata:Relationship name="FK_MarketCurrencies_ToCurrencies" msdata:parent="Currencies" msdata:child="MarketCurrencies" msdata:parentkey="Name" msdata:childkey="CurrencyName" msprop:Generator_UserChildTable="MarketCurrencies" msprop:Generator_ChildPropName="GetMarketCurrenciesRows" msprop:Generator_UserRelationName="FK_MarketCurrencies_ToCurrencies" msprop:Generator_ParentPropName="CurrenciesRow" msprop:Generator_RelationVarName="relationFK_MarketCurrencies_ToCurrencies" msprop:Generator_UserParentTable="Currencies" />
      <msdata:Relationship name="FK_MarketMines_ToMines" msdata:parent="Mines" msdata:child="MarketMines" msdata:parentkey="Name" msdata:childkey="MineName" msprop:Generator_UserChildTable="MarketMines" msprop:Generator_ChildPropName="GetMarketMinesRows" msprop:Generator_UserRelationName="FK_MarketMines_ToMines" msprop:Generator_ParentPropName="MinesRow" msprop:Generator_RelationVarName="relationFK_MarketMines_ToMines" msprop:Generator_UserParentTable="Mines" />
      <msdata:Relationship name="FK_MarketProcesses_ToProcesses" msdata:parent="Processes" msdata:child="MarketProcesses" msdata:parentkey="Name" msdata:childkey="ProcessName" msprop:Generator_UserChildTable="MarketProcesses" msprop:Generator_ChildPropName="GetMarketProcessesRows" msprop:Generator_UserRelationName="FK_MarketProcesses_ToProcesses" msprop:Generator_ParentPropName="ProcessesRow" msprop:Generator_RelationVarName="relationFK_MarketProcesses_ToProcesses" msprop:Generator_UserParentTable="Processes" />
      <msdata:Relationship name="FK_MarketCrops_ToMarkets" msdata:parent="Markets" msdata:child="MarketCrops" msdata:parentkey="Name" msdata:childkey="MarketName" msprop:Generator_UserChildTable="MarketCrops" msprop:Generator_ChildPropName="GetMarketCropsRows" msprop:Generator_UserRelationName="FK_MarketCrops_ToMarkets" msprop:Generator_RelationVarName="relationFK_MarketCrops_ToMarkets" msprop:Generator_UserParentTable="Markets" msprop:Generator_ParentPropName="MarketsRow" />
      <msdata:Relationship name="FK_MarketCurrencies_ToMarkets" msdata:parent="Markets" msdata:child="MarketCurrencies" msdata:parentkey="Name" msdata:childkey="MarketName" msprop:Generator_UserChildTable="MarketCurrencies" msprop:Generator_ChildPropName="GetMarketCurrenciesRows" msprop:Generator_UserRelationName="FK_MarketCurrencies_ToMarkets" msprop:Generator_RelationVarName="relationFK_MarketCurrencies_ToMarkets" msprop:Generator_UserParentTable="Markets" msprop:Generator_ParentPropName="MarketsRow" />
      <msdata:Relationship name="FK_MarketMines_ToMarkets" msdata:parent="Markets" msdata:child="MarketMines" msdata:parentkey="Name" msdata:childkey="MarketName" msprop:Generator_UserChildTable="MarketMines" msprop:Generator_ChildPropName="GetMarketMinesRows" msprop:Generator_UserRelationName="FK_MarketMines_ToMarkets" msprop:Generator_RelationVarName="relationFK_MarketMines_ToMarkets" msprop:Generator_UserParentTable="Markets" msprop:Generator_ParentPropName="MarketsRow" />
      <msdata:Relationship name="FK_MarketProcesses_ToMarkets" msdata:parent="Markets" msdata:child="MarketProcesses" msdata:parentkey="Name" msdata:childkey="MarketName" msprop:Generator_UserChildTable="MarketProcesses" msprop:Generator_ChildPropName="GetMarketProcessesRows" msprop:Generator_UserRelationName="FK_MarketProcesses_ToMarkets" msprop:Generator_RelationVarName="relationFK_MarketProcesses_ToMarkets" msprop:Generator_UserParentTable="Markets" msprop:Generator_ParentPropName="MarketsRow" />
      <msdata:Relationship name="FK_MarketPopulations_ToMarket" msdata:parent="Markets" msdata:child="MarketPopulations" msdata:parentkey="Name" msdata:childkey="MarketName" msprop:Generator_UserChildTable="MarketPopulations" msprop:Generator_ChildPropName="GetMarketPopulationsRows" msprop:Generator_UserRelationName="FK_MarketPopulations_ToMarket" msprop:Generator_ParentPropName="MarketsRow" msprop:Generator_RelationVarName="relationFK_MarketPopulations_ToMarket" msprop:Generator_UserParentTable="Markets" />
      <msdata:Relationship name="FK_MarketPopulations_ToPopulations" msdata:parent="Populations" msdata:child="MarketPopulations" msdata:parentkey="Name" msdata:childkey="PopulationName" msprop:Generator_UserChildTable="MarketPopulations" msprop:Generator_ChildPropName="GetMarketPopulationsRows" msprop:Generator_UserRelationName="FK_MarketPopulations_ToPopulations" msprop:Generator_ParentPropName="PopulationsRow" msprop:Generator_RelationVarName="relationFK_MarketPopulations_ToPopulations" msprop:Generator_UserParentTable="Populations" />
      <msdata:Relationship name="FK_PopulationGoods_ToPopulations" msdata:parent="Populations" msdata:child="PopulationGoods" msdata:parentkey="Name" msdata:childkey="PopulationName" msprop:Generator_UserChildTable="PopulationGoods" msprop:Generator_ChildPropName="GetPopulationGoodsRows" msprop:Generator_UserRelationName="FK_PopulationGoods_ToPopulations" msprop:Generator_ParentPropName="PopulationsRow" msprop:Generator_RelationVarName="relationFK_PopulationGoods_ToPopulations" msprop:Generator_UserParentTable="Populations" />
      <msdata:Relationship name="FK_PopulationGoods_ToProducts" msdata:parent="Products" msdata:child="PopulationGoods" msdata:parentkey="Name" msdata:childkey="ProductName" msprop:Generator_UserChildTable="PopulationGoods" msprop:Generator_ChildPropName="GetPopulationGoodsRows" msprop:Generator_UserRelationName="FK_PopulationGoods_ToProducts" msprop:Generator_ParentPropName="ProductsRow" msprop:Generator_RelationVarName="relationFK_PopulationGoods_ToProducts" msprop:Generator_UserParentTable="Products" />
      <msdata:Relationship name="FK_PopulationLifeNeeds_ToPopulations" msdata:parent="Populations" msdata:child="PopulationLifeNeeds" msdata:parentkey="Name" msdata:childkey="PopulationName" msprop:Generator_UserChildTable="PopulationLifeNeeds" msprop:Generator_ChildPropName="GetPopulationLifeNeedsRows" msprop:Generator_UserRelationName="FK_PopulationLifeNeeds_ToPopulations" msprop:Generator_ParentPropName="PopulationsRow" msprop:Generator_RelationVarName="relationFK_PopulationLifeNeeds_ToPopulations" msprop:Generator_UserParentTable="Populations" />
      <msdata:Relationship name="FK_PopulationLifeNeeds_ToProducts" msdata:parent="Products" msdata:child="PopulationLifeNeeds" msdata:parentkey="Name" msdata:childkey="ProductName" msprop:Generator_UserChildTable="PopulationLifeNeeds" msprop:Generator_ChildPropName="GetPopulationLifeNeedsRows" msprop:Generator_UserRelationName="FK_PopulationLifeNeeds_ToProducts" msprop:Generator_ParentPropName="ProductsRow" msprop:Generator_RelationVarName="relationFK_PopulationLifeNeeds_ToProducts" msprop:Generator_UserParentTable="Products" />
      <msdata:Relationship name="FK_Table_ToCurrencies" msdata:parent="Currencies" msdata:child="PopulationMoney" msdata:parentkey="Name" msdata:childkey="CurrencyName" msprop:Generator_UserChildTable="PopulationMoney" msprop:Generator_ChildPropName="GetPopulationMoneyRows" msprop:Generator_UserRelationName="FK_Table_ToCurrencies" msprop:Generator_ParentPropName="CurrenciesRow" msprop:Generator_RelationVarName="relationFK_Table_ToCurrencies" msprop:Generator_UserParentTable="Currencies" />
      <msdata:Relationship name="FK_Table_ToPopulations" msdata:parent="Populations" msdata:child="PopulationMoney" msdata:parentkey="Name" msdata:childkey="PopulationName" msprop:Generator_UserChildTable="PopulationMoney" msprop:Generator_ChildPropName="GetPopulationMoneyRows" msprop:Generator_UserRelationName="FK_Table_ToPopulations" msprop:Generator_ParentPropName="PopulationsRow" msprop:Generator_RelationVarName="relationFK_Table_ToPopulations" msprop:Generator_UserParentTable="Populations" />
    </xs:appinfo>
  </xs:annotation>
</xs:schema>